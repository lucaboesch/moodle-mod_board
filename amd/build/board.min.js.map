{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the board.\n *\n * @package    mod_board\n * @author     Karen Holland <karen@brickfieldlabs.ie>\n * @copyrigt   2021 Brickfield Education Labs <https://www.brickfield.ie/>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport \"jqueryui\";\nimport {get_strings as getStrings} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalEvents from \"core/modal_events\";\nimport Notification from \"core/notification\";\nimport \"mod_board/jquery.editable.amd\";\nimport Fragment from \"core/fragment\";\n\n/**\n * Execute a ajax call to a mod_board ajax service.\n *\n * @method _serviceCall\n * @param method\n * @param args\n * @param callback\n * @param failcallback\n * @private\n */\nconst _serviceCall = function(method, args, callback, failcallback) {\n    Ajax.call([{\n        methodname: 'mod_board_' + method,\n        args: args,\n        done: function(data) {\n            callback(data);\n        },\n        fail: function(error) {\n            Notification.exception(error);\n            if (failcallback) {\n                failcallback(error);\n            }\n        }\n    }]);\n};\n\n/**\n * Indicates if this is a keycode we want to listend to for\n * aria purposes.\n *\n * @method isAriaTriggerKey\n * @param key\n * @returns {boolean}\n */\nconst isAriaTriggerKey = function(key) {\n    return key == 13 || key == 32;\n};\n\n/**\n * Encodes text into html entities.\n *\n * @method encodeText\n * @param rawText\n * @returns {*|jQuery}\n */\nconst encodeText = function(rawText) {\n    return $('<div />').text(rawText).html();\n};\n\n/**\n * Decodes text from html entities.\n *\n * @method decodeText\n * @param encodedText\n * @returns {*|jQuery}\n */\nconst decodeText = function(encodedText) {\n    return $('<div />').html(encodedText).text();\n};\n\n/**\n * Handler for keypress and click actions.\n *\n * $method handleAction\n * @param elem\n * @param callback\n * @returns {*}\n */\nconst handleAction = function(elem, callback) {\n    return elem.on('click keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode)) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n\n        callback();\n    });\n};\n\n/**\n * Setting up element edibility.\n *\n * @method handleEditableAction\n * @param elem\n * @param callback\n * @param callBeforeOnKeyEditing\n * @returns {*}\n */\nconst handleEditableAction = function(elem, callback, callBeforeOnKeyEditing) {\n    if (elem.is(':editable')) {\n        throw new Error('handleEditableAction - must be called before setting the element as editable');\n    }\n\n    // Can't use on(edit) here because we want to do actions (save cache) before the control goes into edit mode\n    return elem.on('dblclick keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode) && !elem.is(':editing')) {\n                e.preventDefault();\n                if (callBeforeOnKeyEditing) {\n                    callback();\n                }\n                elem.editable('open');\n                if (callBeforeOnKeyEditing) {\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n\n        callback();\n    });\n};\n\n/**\n * The default function of the module, which does the setup of the page.\n *\n * @param board\n * @param options\n * @param contextid\n */\nexport default function(board, options, contextid) {\n    // An array of strings to load as a batch later.\n    // Not necessary, but used to load all the strings in one ajax call.\n    var strings = {\n        default_column_heading: '',\n        post_button_text: '',\n        cancel_button_text: '',\n        remove_note_title: '',\n        remove_note_text: '',\n        remove_column_title: '',\n        remove_column_text: '',\n        note_changed_title: '',\n        note_changed_text: '',\n        note_deleted_text: '',\n        rate_note_text: '',\n        Ok: '',\n        Cancel: '',\n        warning: '',\n        modal_title_new: '',\n        modal_title_edit: '',\n        option_youtube: '',\n        option_image: '',\n        option_link: '',\n\n        aria_newcolumn: '',\n        aria_newpost: '',\n        aria_deletecolumn: '',\n        aria_deletepost: '',\n        aria_addmedia: '',\n        aria_addmedianew: '',\n        aria_deleteattachment: '',\n        aria_postedit: '',\n        aria_canceledit: '',\n        aria_postnew: '',\n        aria_cancelnew: '',\n        aria_ratepost: '',\n\n        invalid_file_extension: '',\n        invalid_file_size_min: '',\n        invalid_file_size_max: '',\n\n        invalid_youtube_url: '',\n    };\n\n    const MEDIA_SELECTION_BUTTONS = 1,\n          ATTACHMENT_VIDEO = 1,\n          ATTACHMENT_IMAGE = 2,\n          ATTACHMENT_LINK = 3,\n          SORTBY_DATE = 1,\n          SORTBY_RATING = 2;\n    var reloadTimer = null,\n        lastHistoryId = null,\n        isEditor = options.isEditor || false,\n        userId = options.userId || -1,\n        mediaSelection = options.mediaselection || MEDIA_SELECTION_BUTTONS,\n        editingNote = 0,\n        isReadOnlyBoard = options.readonly || false,\n        ratingenabled = options.ratingenabled,\n        sortby = options.sortby || SORTBY_DATE,\n        editModal = null;\n    /**\n     * Helper method to make calles to mod_board external services.\n     *\n     * @method serviceCall\n     * @param method\n     * @param args\n     * @param callback\n     * @param failcallback\n     */\n    var serviceCall = function(method, args, callback, failcallback) {\n        if (method !== 'board_history') {\n            stopUpdating();\n        }\n        _serviceCall(method, args, function() {\n            callback.apply(null, arguments);\n            if (method !== 'board_history' && method != 'get_board') {\n                updateBoard(true);\n            }\n        }, failcallback);\n    };\n\n    /**\n     * Returns the jquery element of a given note identifier.\n     *\n     * @method getNote\n     * @param ident\n     * @returns {jQuery|HTMLElement|*}\n     */\n    var getNote = function(ident) {\n        return $(\".board_note[data-ident='\" + ident + \"']\");\n    };\n\n    /**\n     * Returns the jquery element of the note text for the given note element.\n     *\n     * @method getNoteTextForNote\n     * @param note\n     * @returns {*|jQuery}\n     */\n    var getNoteTextForNote = function(note) {\n        return $(note).find(\".mod_board_note_text\");\n    };\n\n    /**\n     * Returns the jquery element of the note heading for the given note element.\n     *\n     * @method getNoteHeadingForNote\n     * @param note\n     * @returns {*|jQuery}\n     */\n    var getNoteHeadingForNote = function(note) {\n        return $(note).find(\".mod_board_note_heading\");\n    };\n\n    /**\n     * Returns the jquery element of the note border for the given note element.\n     *\n     * @method getNoteBorderForNote\n     * @param note\n     * @returns {*|jQuery}\n     */\n    var getNoteBorderForNote = function(note) {\n        return $(note).find(\".mod_board_note_border\");\n    };\n\n    /**\n     * Gets a jquery node for the attachments of a given note.\n     *\n     * @method getNoteAttachmentsForNote\n     * @param note\n     * @returns {*|jQuery}\n     */\n    var getNoteAttachmentsForNote = function(note) {\n        return $(note).find(\".mod_board_note_attachment\");\n    };\n\n    /**\n     * Creates text identifier for a given node.\n     *\n     * @method textIdentifierForNote\n     * @param note\n     * @returns {null|*|jQuery}\n     */\n    var textIdentifierForNote = function(note) {\n        var noteText = getNoteTextForNote(note).html(),\n            noteHeading = getNoteHeadingForNote(note).html(),\n            noteAttachment = attachmentDataForNote(note);\n\n        if (noteHeading.length > 0) {\n            return noteHeading;\n        }\n        if (noteText.length > 0) {\n            return noteText.replace(/<br\\s*\\/?>/gi, \" \").replace(/\\n/g, \" \").split(/\\s+/).slice(0, 5).join(\" \");\n        }\n        if (noteAttachment.info && noteAttachment.info.length > 0) {\n            return noteAttachment.info;\n        }\n        return null;\n    };\n\n    /**\n     * Update the Aria info for a given note id.\n     *\n     * @method updateNoteAria\n     * @param noteId\n     */\n    var updateNoteAria = function(noteId) {\n        var note = getNote(noteId),\n            columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text();\n\n        if (noteId) { // New post\n            var noteIdentifier = textIdentifierForNote(note),\n                deleteNoteString = strings.aria_deletepost.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n\n            note.find('.delete_note').attr('aria-label', deleteNoteString).attr('title', deleteNoteString);\n            note.find('.mod_board_rating').attr('aria-label', strings.aria_ratepost.replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier));\n            note.find('.note_ariatext').html(noteIdentifier);\n        }\n\n    };\n\n    /**\n     * Update the Aria information for a given column id.\n     *\n     * @method updateColumnAria\n     * @param columnId\n     */\n    var updateColumnAria = function(columnId) {\n        var column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            newNoteString = strings.aria_newpost.replace('{column}', columnIdentifier),\n            deleteColumnString = strings.aria_deletecolumn.replace('{column}', columnIdentifier);\n        column.find('.newnote').attr('aria-label', newNoteString).attr('title', newNoteString);\n        column.find('.delete_column').attr('aria-label', deleteColumnString).attr('title', deleteColumnString);\n\n        column.find(\".board_note\").each(function(index, note) {\n            updateNoteAria($(note).data('ident'));\n        });\n    };\n\n    /**\n     * Stop the current note editing process.\n     *\n     * @method stopNoteEdit\n     */\n    var stopNoteEdit = function() {\n        if (!editingNote) {\n            getNote(0).remove();\n            return;\n        }\n\n        var note = getNote(editingNote);\n\n        if (note) {\n            var noteHeading = getNoteHeadingForNote(note);\n            var noteText = getNoteTextForNote(note);\n            var noteBorder = getNoteBorderForNote(note);\n\n            // Reset the visibility state.\n            noteHeading.show();\n            noteBorder.show();\n            noteText.show();\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n        }\n\n        editingNote = 0;\n    };\n\n    /**\n     * Start the editing of a particular note, by identifier.\n     *\n     * @method startNoteEdit\n     * @param ident\n     */\n    var startNoteEdit = function(ident) {\n\n        if (editingNote) {\n            if (editingNote == ident) {\n                return;\n            }\n            stopNoteEdit();\n        }\n\n        if (ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        var note = getNote(ident);\n        if (note) {\n            showModalForm(note);\n\n            if (ident) {\n                editingNote = ident;\n            }\n        }\n    };\n\n    /**\n     * Delete a given note, by identifier.\n     *\n     * @method deleteNote\n     * @param ident\n     */\n    var deleteNote = function(ident) {\n        Notification.confirm(\n            strings.remove_note_title,\n            strings.remove_note_text,\n            strings.Ok,\n            strings.Cancel,\n            function() {\n                serviceCall('delete_note', {id: ident}, function(result) {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        getNote(ident).remove();\n                    }\n                });\n            }\n        );\n    };\n\n    /**\n     * Rate (star) a give note, by identifier.\n     *\n     * @method rateNote\n     * @param ident\n     */\n    var rateNote = function(ident) {\n        if (!ratingenabled) {\n            return;\n        }\n        if (isReadOnlyBoard) {\n            return;\n        }\n\n        var note = getNote(ident),\n            rating = note.find('.mod_board_rating');\n        if (rating.data('disabled')) {\n            return;\n        }\n        rating.data('disabled', true);\n\n        serviceCall('can_rate_note', {id: ident}, function(canrate) {\n            if (canrate) {\n                Notification.confirm(\n                    strings.rate_note_text, // Are you sure?\n                    null,\n                    strings.Ok,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('rate_note', {id: ident}, function(result) {\n                            if (result.status) {\n                                lastHistoryId = result.historyid;\n                                rating.html(result.rating);\n                                if (sortby == SORTBY_RATING) {\n                                    sortNotes(note.closest('.board_column_content'));\n                                }\n                            }\n                            rating.data('disabled', false);\n                        });\n                    }\n                ).then(function(rateModal) {\n                    // Do this here, because it catches both cancel clicks, or someone clicking the X.\n                    rateModal.getRoot().on(ModalEvents.hidden, function() {\n                        rating.data('disabled', false);\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Update the attachment information of a note.\n     *\n     * @method attachmentTypeChanged\n     * @param note\n     */\n    var attachmentTypeChanged = function(note) {\n        var noteAttachment = getNoteAttachmentsForNote(note),\n            type = noteAttachment.find('.mod_board_type').val(),\n            attachmentInfo = noteAttachment.find('.info'),\n            attachmentUrl = noteAttachment.find('.url'),\n            attachmentFile = noteAttachment.find('.mod_board_file');\n\n        if (type > \"0\") {\n            attachmentInfo.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_info']);\n            attachmentUrl.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_url']);\n\n            attachmentInfo.show();\n            if (type == ATTACHMENT_IMAGE && FileReader) {\n                attachmentFile.show();\n                attachmentUrl.hide();\n            } else {\n                attachmentFile.hide();\n                attachmentUrl.show();\n            }\n        } else {\n            attachmentInfo.hide();\n            attachmentUrl.hide();\n            attachmentFile.hide();\n\n            attachmentInfo.val('');\n            attachmentUrl.val('');\n\n        }\n    };\n\n    /**\n     * Set the attachment of a note.\n     *\n     * @method setAttachment\n     * @param note\n     * @param attachment\n     */\n    var setAttachment = function(note, attachment) {\n        var noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment) {\n            if (!attachment) {\n                attachment = {type: \"0\"};\n            } else {\n                attachment.type += \"\";// Just in case\n            }\n            var attType = noteAttachment.find('.mod_board_type');\n            attType.val(attachment.type ? attachment.type : \"0\");\n            if (attType.val() > \"0\") {\n                noteAttachment.find('.info').val(decodeText(attachment.info));\n                noteAttachment.find('.url').val(decodeText(attachment.url));\n            }\n            attachmentTypeChanged(note, attachment);\n        }\n        previewAttachment(note, attachment);\n    };\n\n    /**\n     * Returns an object with various information about a note's attachment.\n     *\n     * @method attachmentDataForNote\n     * @param note\n     * @returns {{filename: null, filecontents: null, type: number, url: null, info: null}}\n     */\n    var attachmentDataForNote = function(note) {\n        var attachment = {type: 0, info: null, url: null, filename: null, filecontents: null},\n            noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment.length) {\n            attachment.type = noteAttachment.find('.mod_board_type').val();\n            attachment.info = encodeText(noteAttachment.find('.info').val());\n            attachment.url = encodeText(noteAttachment.find('.url').val());\n            var fileElem = noteAttachment.find('.mod_board_file>input');\n            if (fileElem.data('filename')) {\n                attachment.filename = fileElem.data('filename');\n                attachment.filecontents = fileElem.data('filecontents');\n            }\n        }\n        if ((!attachment.info || !attachment.info.length) && (!attachment.url || !attachment.url.length) &&\n            (!attachment.filename)) {\n            attachment.type = 0;\n        }\n\n        return attachment;\n    };\n\n    /**\n     * Get the string type of a attachment type number.\n     *\n     * @method attachmentTypeToString\n     * @param type\n     * @returns {string|null}\n     */\n    var attachmentTypeToString = function(type) {\n        switch (type) {\n            case \"1\": return 'youtube';\n            case \"2\": return 'image';\n            case \"3\": return 'link';\n            default: return null;\n        }\n    };\n\n    /**\n     * This parses a youtube video ID from a URL. We can use this ID to\n     * construct the embed URL.\n     * @param {string} url The URL entered to the modal.\n     * @returns {string | null} The youtube embed URL or null.\n     */\n    const getEmbedUrl = (url) => {\n        // Thanks for the regex from: https://gist.github.com/rodrigoborgesdeoliveira/987683cfbfcc8d800192da1e73adc486\n        let regex = /(\\/|%3D|v=)([0-9A-z-_]{11})([%#?&]|$)/;\n        let videoID = url.match(regex);\n        if (!videoID || videoID[2] === undefined || videoID[2].length !== 11) {\n            return null;\n        }\n        return `https://youtube.com/embed/${videoID[2]}`;\n    };\n\n    /**\n     * Display the attachment preview for a note.\n     *\n     * @method previewAttachment\n     * @param note\n     * @param attachment\n     */\n    var previewAttachment = function(note, attachment) {\n        var elem = note.find('.mod_board_preview');\n        if (!attachment) {\n            attachment = attachmentDataForNote(note);\n        }\n\n        if (!getNoteTextForNote(note).html().length) {\n            elem.addClass('mod_board_notext');\n        } else {\n            elem.removeClass('mod_board_notext');\n        }\n\n        elem.removeClass('wrapper_youtube');\n        elem.removeClass('wrapper_image');\n        elem.removeClass('wrapper_url');\n        if (attachment.filename && parseInt(attachment.type) == ATTACHMENT_IMAGE) { // Before uploading\n            elem.html(`<img src=\"${attachment.filecontents}\" alt=\"${attachment.info}\"\n                class=\"mod_board_preview_element\"/>`);\n            elem.addClass('wrapper_image');\n            elem.show();\n        } else if (attachment.url) {\n            switch (parseInt(attachment.type)) {\n                case ATTACHMENT_VIDEO: { // Youtube\n                    let url = getEmbedUrl(attachment.url);\n                    if (url === null) {\n                        elem.html(strings.invalid_youtube_url);\n                    } else {\n                        elem.html('<iframe src=\"' + url +\n                            '\" class=\"mod_board_preview_element\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;' +\n                            'encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>');\n                        elem.addClass('wrapper_youtube');\n                    }\n                    elem.show();\n                }\n                break;\n                case ATTACHMENT_IMAGE: // Image\n                    elem.html(`<img src=\"${attachment.url}\" alt=\"${attachment.info}\"\n                        class=\"mod_board_preview_element\"/>`);\n                    elem.addClass('wrapper_image');\n                    elem.show();\n                break;\n                case ATTACHMENT_LINK: // Url\n                    elem.html('<a href=\"' + attachment.url + '\" class=\"mod_board_preview_element\" target=\"_blank\">' +\n                             (attachment.info || attachment.url) + '</a>');\n                    elem.addClass('wrapper_url');\n                    elem.show();\n                break;\n                default:\n                    elem.html('');\n                    elem.hide();\n            }\n        } else {\n            elem.html('');\n            elem.hide();\n        }\n    };\n\n    /**\n     * Add a new note with the given information.\n     *\n     * @method addNote\n     * @param columnid\n     * @param ident\n     * @param heading\n     * @param content\n     * @param attachment\n     * @param owner\n     * @param sortorder\n     * @param rating\n     */\n    var addNote = function(columnid, ident, heading, content, attachment, owner, sortorder, rating) {\n        var ismynote = owner.id == userId || !ident;\n        var iseditable = isEditor || (ismynote && !isReadOnlyBoard);\n\n        if (!ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        var note = $('<div class=\"board_note\" data-column=\"' + columnid + '\" data-ident=\"' + ident +\n            '\" data-sortorder=\"' + sortorder + '\"></div>');\n        if (ismynote) {\n            note.addClass('mod_board_mynote');\n        }\n        if (iseditable) {\n            note.addClass('mod_board_editablenote');\n        }\n\n        var notecontent = $('<div class=\"mod_board_note_content\"></div>'),\n            noteHeading = $('<div class=\"mod_board_note_heading\" tabindex=\"0\">' + (heading ? heading : '') + '</div>'),\n            noteBorder = $('<div class=\"mod_board_note_border\"></div>'),\n            noteText = $('<div class=\"mod_board_note_text\" tabindex=\"0\">' + (content ? content : '') + '</div>'),\n            noteAriaText = $('<div class=\"note_ariatext hidden\" role=\"heading\" aria-level=\"4\" tabindex=\"0\"></div>'),\n            attachmentPreview = $('<div class=\"mod_board_preview\"></div>');\n\n        notecontent.append(noteHeading);\n        notecontent.append(noteBorder);\n        notecontent.append(noteText);\n        notecontent.append(noteAriaText);\n\n        notecontent.append(attachmentPreview);\n        note.append(notecontent);\n\n        var columnContent = $('.board_column[data-ident=' + columnid + '] .board_column_content');\n\n        var beginEdit = () => {\n            startNoteEdit(ident);\n        };\n\n        if (ident) {\n            if (ratingenabled) {\n                note.addClass('mod_board_rateablenote');\n                var rateElement = $(`<div class=\"fa fa-star mod_board_rating\" role=\"button\" tabindex=\"0\"> ${rating} </div>`);\n\n                handleAction(rateElement, () => {\n                    rateNote(ident);\n                });\n                notecontent.append(rateElement);\n            }\n\n            if (iseditable) {\n                var removeElement = $('<div class=\"mod_board_remove fa fa-remove delete_note\" role=\"button\" tabindex=\"0\"></div>');\n                handleAction(removeElement, () => {\n                    deleteNote(ident);\n                });\n\n                notecontent.append(removeElement);\n\n                handleEditableAction(noteText, beginEdit);\n                handleEditableAction(noteHeading, beginEdit);\n                handleEditableAction(noteBorder, beginEdit);\n\n                setAttachment(note, attachment);\n            } else {\n                previewAttachment(note, attachment);\n            }\n\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n\n            var lastOne = columnContent.find(\".board_note\").last();\n\n            if (lastOne.length) {\n                note.insertAfter(lastOne);\n            } else {\n                columnContent.prepend(note);\n            }\n        } else {\n            $('.board_column[data-ident=' + columnid + '] .board_column_newcontent').append(note);\n            // This is effectively a note placeholder. So we don't need to show it.\n            note.hide();\n            beginEdit();\n        }\n    };\n\n    /**\n     * Add a new column.\n     *\n     * @method addColumn\n     * @param ident\n     * @param name\n     * @param notes\n     */\n    var addColumn = function (ident, name, notes, colour) {\n        let headerStyle = `style=\"border-top: 10px solid #${colour}\"`;\n        var iseditable = isEditor,\n            nameCache = null,\n            column = $(`<div class=\"board_column board_column_hasdata\" ${headerStyle} data-ident=\"${ident}\"></div>`),\n            columnHeader = $('<div class=\"board_column_header\"></div>'),\n            columnSort = $('<div class=\"mod_board_column_sort fa\"></div>'),\n            columnName = $('<div class=\"mod_board_column_name\" tabindex=\"0\" aria-level=\"3\" role=\"heading\">' + name + '</div>'),\n            columnContent = $('<div class=\"board_column_content\"></div>'),\n            columnNewContent = $('<div class=\"board_column_newcontent\"></div>');\n        columnHeader.append(columnSort);\n        columnHeader.append(columnName);\n\n        if (options.hideheaders) {\n            columnName.addClass('d-none');\n        }\n\n        columnSort.on('click', function() {\n            sortNotes(columnContent, true);\n        });\n\n        if (iseditable) {\n            column.addClass('mod_board_editablecolumn');\n\n            var removeElement = $('<div class=\"mod_board_remove fa fa-remove delete_column\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(removeElement, function() {\n                Notification.confirm(\n                    strings.remove_column_title, // Are you sure?\n                    strings.remove_column_text, // This will effect others.\n                    strings.Ok,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('delete_column', {id: ident}, function(result) {\n                            if (result.status) {\n                                column.remove();\n                                lastHistoryId = result.historyid;\n                            }\n                        });\n                    }\n                );\n            });\n\n            columnHeader.append(removeElement);\n        }\n\n        column.append(columnHeader);\n        column.append(columnContent);\n        column.append(columnNewContent);\n\n        if (iseditable) {\n            handleEditableAction(columnName, function() {\n                nameCache = columnName.html();\n            }, true);\n\n            columnName.editable({\n                toggleFontSize: false,\n                closeOnEnter: true,\n                callback: function(data) {\n                    if (data.content) {\n                        serviceCall('update_column', {id: ident, name: columnName.html()}, function(result) {\n                            if (!result.status) {\n                                columnName.html(nameCache);\n                                nameCache = null;\n                            } else {\n                                lastHistoryId = result.historyid;\n                                updateColumnAria(ident);\n                            }\n                        }, function() {\n                            columnName.html(nameCache);\n                            nameCache = null;\n                        });\n                    } else {\n                        columnName.html(nameCache);\n                        nameCache = null;\n                    }\n                }\n            });\n        }\n\n        if (!isReadOnlyBoard) {\n            columnNewContent.append('<div class=\"board_button newnote\" role=\"button\" tabindex=\"0\">' +\n            '<div class=\"button_content\"><span class=\"fa ' + options.noteicon + '\"></span></div></div>');\n\n            handleAction(columnNewContent.find('.newnote'), function() {\n                addNote(ident, 0, null, null, null, {id: userId}, 0, 0);\n            });\n        }\n\n        var lastOne = $(\".mod_board .board_column_hasdata\").last();\n        if (lastOne.length) {\n            column.insertAfter(lastOne);\n        } else {\n            $(\".mod_board\").append(column);\n        }\n\n        if (notes) {\n            for (var index in notes) {\n                addNote(ident, notes[index].id, notes[index].heading, notes[index].content,\n                    {type: notes[index].type, info: notes[index].info, url: notes[index].url},\n                    {id: notes[index].userid}, notes[index].timecreated, notes[index].rating);\n            }\n        }\n        sortNotes(columnContent);\n        updateColumnAria(ident);\n        if (isEditor) {\n            updateSortable();\n        }\n    };\n\n    /**\n     * Add the new column button.\n     *\n     * @method addNewColumnButton\n     */\n    var addNewColumnButton = function() {\n        var column = $('<div class=\"board_column board_column_empty\"></div>'),\n            newBusy = false;\n        column.append('<div class=\"board_button newcolumn\" role=\"button\" tabindex=\"0\" aria-label=\"' +\n            strings.aria_newcolumn + '\" title=\"' + strings.aria_newcolumn + '\"><div class=\"button_content\"><span class=\"fa '\n            + options.columnicon + '\"></span></div></div>');\n\n        handleAction(column.find('.newcolumn'), function() {\n            if (newBusy) {\n                return;\n            }\n            newBusy = true;\n\n            serviceCall('add_column', {boardid: board.id, name: strings.default_column_heading}, function(result) {\n                addColumn(result.id, strings.default_column_heading, {}, selectHeadingColour());\n                lastHistoryId = result.historyid;\n                newBusy = false;\n            }, function() {\n                newBusy = false;\n            });\n        });\n\n        $(\".mod_board\").append(column);\n    };\n\n    /**\n     * This selects the next heading colour from options based on the count of the\n     * current columns. Length of decremented by one as the new column button is\n     * also denoted as a column.\n     * @returns {string} colour hex string.\n     */\n    const selectHeadingColour = () => {\n        let colCount = $('.board_column').length - 1;\n        let colourCount = options.colours.length;\n        return options.colours[colCount % colourCount];\n    };\n\n    /**\n     * Update a note with the provided information.\n     *\n     * @method updateNote\n     * @param note\n     * @param heading\n     * @param data\n     */\n    var updateNote = function(note, heading, data) {\n        var noteHeading = getNoteHeadingForNote(note);\n        var noteText = getNoteTextForNote(note);\n        var noteBorder = getNoteBorderForNote(note);\n\n        noteText.html(data.content);\n        noteHeading.html(data.heading);\n        setAttachment(note, data.attachment);\n        updateNoteAria(data.id);\n\n        // Reset the visibility state.\n        noteHeading.show();\n        noteBorder.show();\n        noteText.show();\n        if (!noteHeading.html()) {\n            noteHeading.hide();\n            noteBorder.hide();\n        }\n        if (!noteText.html() && noteHeading.html()) {\n            noteText.hide();\n            noteBorder.hide();\n        }\n    };\n\n    /**\n     * Fetch and process the recent board history.\n     *\n     * @method processBoardHistory\n     */\n    var processBoardHistory = function() {\n        serviceCall('board_history', {id: board.id, since: lastHistoryId}, function(boardhistory) {\n            for (var index in boardhistory) {\n                var item = boardhistory[index];\n                if (item.boardid != board.id) {\n                    continue; // Hmm\n                }\n\n                var data = JSON.parse(item.content);\n                if (item.action == 'add_note') {\n                    addNote(data.columnid, data.id, data.heading, data.content, data.attachment,\n                        {id: item.userid}, data.timecreated, data.rating);\n                    updateNoteAria(data.id);\n                    sortNotes($('.board_column[data-ident=' + data.columnid + '] .board_column_content'));\n                } else if (item.action == 'update_note') {\n                    let note = getNote(data.id),\n                        formModal = editModal,\n                        historyData = data;\n                    if (note) {\n                        let noteHeading = getNoteHeadingForNote(note);\n\n                        if (editingNote == data.id) {\n                            Notification.confirm(\n                                strings.note_changed_title,\n                                strings.note_changed_text,\n                                strings.Ok,\n                                strings.Cancel,\n                                function() {\n                                    formModal.hide();\n                                    updateNote(note, noteHeading, historyData);\n                                    stopNoteEdit();\n                                }\n                            );\n                        } else {\n                            updateNote(note, noteHeading, data);\n                        }\n                    }\n                } else if (item.action == 'delete_note') {\n                    if (editingNote == data.id) {\n                        Notification.alert(strings.warning, strings.note_deleted_text);\n                        stopNoteEdit();\n                    }\n                    getNote(data.id).remove();\n\n                } else if (item.action == 'add_column') {\n                    addColumn(data.id, data.name, {}, selectHeadingColour());\n                } else if (item.action == 'update_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"'] .mod_board_column_name\").html(data.name);\n                    updateColumnAria(data.id);\n                } else if (item.action == 'delete_column') {\n                    var column = $(\".board_column[data-ident='\" + data.id + \"']\");\n                    if (editingNote && column.find('.board_note[data-ident=\"' + editingNote + '\"]').length) {\n                        stopNoteEdit();\n                    }\n                    column.remove();\n                } else if (item.action == 'rate_note') {\n                    var note = getNote(data.id);\n                    note.find('.mod_board_rating').html(data.rating);\n                    if (sortby == SORTBY_RATING) {\n                        sortNotes(note.closest('.board_column_content'));\n                    }\n                }\n                lastHistoryId = item.id;\n            }\n\n            updateBoard();\n        });\n    };\n\n    /**\n     * Trigger a board update.\n     *\n     * @method updateBoard\n     * @param instant\n     */\n    var updateBoard = function(instant) {\n        if (instant) {\n            processBoardHistory();\n        } else if (options.history_refresh > 0) {\n            if (reloadTimer) {\n                stopUpdating();\n            }\n            reloadTimer = setTimeout(processBoardHistory, options.history_refresh * 1000);\n        }\n    };\n\n    /**\n     * Stop/prevent the board reload timer from firing.\n     *\n     * @method stopUpdating\n     */\n    var stopUpdating = function() {\n        clearTimeout(reloadTimer);\n        reloadTimer = null;\n    };\n\n    /**\n     * Sort a set of notes.\n     *\n     * @sortNotes\n     * @param content\n     * @param toggle\n     */\n    var sortNotes = function(content, toggle) {\n        var sortCol = $(content).parent().find('.mod_board_column_sort'),\n            direction = $(content).data('sort');\n        if (!direction) {\n            if (sortby == SORTBY_RATING) {\n                direction = 'desc';\n            } else {\n                direction = 'asc';\n            }\n        }\n        if (toggle) {\n            direction = direction == 'asc' ? 'desc' : 'asc';\n        }\n\n        if (direction == 'asc') {\n            sortCol.removeClass('fa-angle-down');\n            sortCol.addClass('fa-angle-up');\n        } else {\n            sortCol.removeClass('fa-angle-up');\n            sortCol.addClass('fa-angle-down');\n        }\n        $(content).data('sort', direction);\n\n        var desc,\n            asc;\n        if (sortby == SORTBY_DATE) {\n            desc = function(a, b) {\n                return $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else {\n            desc = function(a, b) {\n                return $(b).find('.mod_board_rating').text() - $(a).find('.mod_board_rating').text() ||\n                $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).find('.mod_board_rating').text() - $(b).find('.mod_board_rating').text() ||\n                $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        }\n\n        $('> .board_note', $(content)).sort(direction === 'asc' ? asc : desc).appendTo($(content));\n\n    };\n\n    /**\n     * Update sorting of sortable content.\n     *\n     * @method updateSortable\n     */\n    var updateSortable = function() {\n        $(\".board_column_content\").sortable({\n            connectWith: \".board_column_content\",\n            stop: function(e, ui) {\n                var note = $(ui.item),\n                    tocolumn = note.closest('.board_column'),\n                    columnid = tocolumn.data('ident'),\n                    elem = $(this);\n\n                serviceCall('move_note', {id: note.data('ident'), columnid: columnid}, function(result) {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        updateNoteAria(note.data('ident'));\n                        sortNotes($('.board_column[data-ident=' + columnid + '] .board_column_content'));\n                    } else {\n                        elem.sortable('cancel');\n                    }\n                });\n            }\n        });\n    };\n\n    /**\n     * Get the body fragment for the modal form.\n     *\n     * @param noteid\n     * @param columnid\n     * @returns {Deferred|*}\n     */\n    var getBody = function(noteid, columnid) {\n        // Get the content of the modal.\n        var params = {noteid: noteid, columnid: columnid};\n        return Fragment.loadFragment('mod_board', 'note_form', contextid, params);\n    };\n\n    /**\n     * Setup the aria labels for the modal.\n     *\n     * @param note\n     * @param modal\n     */\n    var updateModalAria = function(note, modal) {\n        let columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text(),\n            addYoutube,\n            addImage,\n            addLink,\n            postButton,\n            cancelButton,\n            modalRoot = modal.getRoot();\n\n        if (note.data('ident')) {\n            // Is a note update.\n            var noteIdentifier = textIdentifierForNote(note);\n\n            postButton = strings.aria_postedit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            cancelButton = strings.aria_canceledit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            addYoutube = strings.aria_addmedia.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addImage = strings.aria_addmedia.replace('{type}', strings.option_image).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addLink = strings.aria_addmedia.replace('{type}', strings.option_link).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n        } else {\n            // Note is new.\n            postButton = strings.aria_postnew.replace('{column}', columnIdentifier);\n            cancelButton = strings.aria_cancelnew.replace('{column}', columnIdentifier);\n            addYoutube = strings.aria_addmedianew.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier);\n            addImage = strings.aria_addmedianew.replace('{type}', strings.option_image).replace('{column}', columnIdentifier);\n            addLink = strings.aria_addmedianew.replace('{type}', strings.option_link).replace('{column}', columnIdentifier);\n        }\n\n        if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('aria-label', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('title', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('aria-label', addImage);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('title', addImage);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('aria-label', addLink);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('title', addLink);\n        }\n\n        let button = modalRoot.find(modal.getActionSelector('save'));\n        if (button) {\n            button.attr('aria-label', postButton);\n        }\n        button = modalRoot.find(modal.getActionSelector('cancel'));\n        if (button) {\n            button.attr('aria-label', cancelButton);\n        }\n    };\n\n    /**\n     * Displays the modal form to edit a note.\n     *\n     * @param note\n     */\n    var showModalForm = function(note) {\n        let noteId = 0,\n            columnId = note.data('column'),\n            column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            title;\n\n        if (note.data('ident')) {\n            noteId = note.data('ident');\n            title = strings.modal_title_edit.replace('{column}', columnIdentifier);\n        } else {\n            title = strings.modal_title_new.replace('{column}', columnIdentifier);\n        }\n\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: getBody(noteId, columnId),\n            large: true,\n            removeOnClose: true\n        }).then(function(modal) {\n            // Use the body promise so we know body content is loaded.\n            modal.getBodyPromise().then(function () {\n                let saveInProgress = false;\n                editModal = modal;\n                modal.setLarge();\n                modal.setSaveButtonText(strings.post_button_text);\n                modal.setButtonText('cancel', strings.cancel_button_text);\n\n                modal.getRoot().on(ModalEvents.hidden, function () {\n                    stopNoteEdit();\n                    if (!note.data('ident')) {\n                        note.remove();\n                    }\n                });\n\n                modal.getRoot().on(ModalEvents.save, function (e) {\n                    e.preventDefault();\n                    modal.getRoot().find('form').submit();\n                });\n\n                var changeEvent = document.createEvent('HTMLEvents');\n                changeEvent.initEvent('change', true, true);\n\n                modal.getRoot().on('submit', 'form', function (e) {\n                    e.preventDefault();\n\n                    // Prevent multiple form submissions from being sent.\n                    if (saveInProgress) {\n                        return;\n                    }\n                    saveInProgress = true;\n\n                    // First, make sure the native html5 validity checks are run.\n                    let valid = modal.getRoot().find('form').get(0).reportValidity();\n                    if (!valid) {\n                        return;\n                    }\n\n                    // Prompt all inputs to run their validation functions.\n                    // Normally this would happen when the form is submitted, but\n                    // since we aren't submitting the form normally we need to run client side\n                    // validation.\n                    modal.getRoot().find(':input').each(function (index, element) {\n                        element.dispatchEvent(changeEvent);\n                    });\n\n                    // Now the change events have run, see if there are any \"invalid\" form fields.\n                    var invalid = $.merge(\n                        modal.getRoot().find('[aria-invalid=\"true\"]'),\n                        modal.getRoot().find('.error'),\n                        modal.getRoot().find(':invalid')\n                    );\n\n                    // If we found invalid fields, focus on the first one and do not submit via ajax.\n                    if (invalid.length) {\n                        invalid.first().focus();\n                        return;\n                    }\n\n                    var formData = JSON.stringify(modal.getRoot().find('form').serialize());\n                    serviceCall('submit_form', {contextid: contextid, jsonformdata: formData}, function (result) {\n                        if (result.status) {\n                            if (result.action == 'insert') {\n                                // Added a new note.\n                                lastHistoryId = result.historyid;\n                                note.remove();\n                                addNote(columnId, result.note.id, result.note.heading, result.note.content,\n                                    {type: result.note.type, info: result.note.info, url: result.note.url},\n                                    {id: result.note.userid}, result.note.timecreated, result.note.rating);\n                                sortNotes($('.board_column[data-ident=' + columnId + '] .board_column_content'));\n                                updateNoteAria(result.note.id);\n                            } else {\n                                // Updated existing note.\n                                lastHistoryId = result.historyid;\n                                getNoteTextForNote(note).html(result.note.content);\n                                getNoteHeadingForNote(note).html(result.note.heading);\n                                updateNoteAria(result.note.id);\n                                setAttachment(note, {\n                                    type: result.note.type,\n                                    info: result.note.info, url: result.note.url\n                                });\n                            }\n                            stopNoteEdit();\n\n                            // Clear the form changed checker.\n                            Y.use('moodle-core-formchangechecker', function() {\n                                M.core_formchangechecker.reset_form_dirty_state();\n                            });\n\n                            modal.destroy();\n                        } else {\n                            // TODO show error.\n                        }\n                    });\n\n                });\n\n                if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n                    // First hide the select menu.\n                    modal.getRoot().find('#fitem_id_mediatype').hide();\n\n                    let mediaSelect = modal.getRoot().find('#fitem_id_mediatype select'),\n                        ytButton = modal.getRoot().find('.mod_board_attachment_button.youtube_button'),\n                        pictureButton = modal.getRoot().find('.mod_board_attachment_button.image_button'),\n                        linkButton = modal.getRoot().find('.mod_board_attachment_button.link_button'),\n                        updateMediaButtons = function() {\n                            ytButton.removeClass('selected');\n                            pictureButton.removeClass('selected');\n                            linkButton.removeClass('selected');\n                            switch (mediaSelect.val()) {\n                                case (\"1\"):\n                                    ytButton.addClass('selected');\n                                    break;\n                                case (\"2\"):\n                                    pictureButton.addClass('selected');\n                                    break;\n                                case (\"3\"):\n                                    linkButton.addClass('selected');\n                                    break;\n                            }\n                        };\n\n                    updateMediaButtons();\n                    handleAction(ytButton, function() {\n                        if (mediaSelect.val() === \"1\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(1);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(pictureButton, function() {\n                        if (mediaSelect.val() === \"2\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(2);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(linkButton, function() {\n                        if (mediaSelect.val() === \"3\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(3);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                } else {\n                    modal.getRoot().find('#fitem_id_mediabuttons').hide();\n                }\n\n                updateModalAria(note, modal);\n                modal.show();\n\n                return modal;\n            });\n            return modal;\n        });\n    };\n\n    /**\n     * Initialize board.\n     *\n     * @method init\n     */\n    var init = function() {\n        serviceCall('get_board', {id: board.id}, function(columns) {\n            // Init\n            if (columns) {\n                for (var index in columns) {\n                    addColumn(\n                        columns[index].id,\n                        columns[index].name,\n                        columns[index].notes || {},\n                        options.colours[index % options.colours.length]\n                    );\n                }\n            }\n\n            if (isEditor) {\n                addNewColumnButton();\n            }\n\n            lastHistoryId = board.historyid;\n\n            if (isEditor) {\n                updateSortable();\n            }\n\n            updateBoard();\n        });\n    };\n\n    // Get strings\n    var stringsInfo = [];\n    for (var string in strings) {\n        stringsInfo.push({key: string, component: 'mod_board'});\n    }\n\n    $.when(getStrings(stringsInfo)).done(function(results) {\n        var index = 0;\n        for (string in strings) {\n            strings[string] = results[index++];\n        }\n\n        init();\n    });\n}\n"],"names":["board","options","contextid","strings","default_column_heading","post_button_text","cancel_button_text","remove_note_title","remove_note_text","remove_column_title","remove_column_text","note_changed_title","note_changed_text","note_deleted_text","rate_note_text","Ok","Cancel","warning","modal_title_new","modal_title_edit","option_youtube","option_image","option_link","aria_newcolumn","aria_newpost","aria_deletecolumn","aria_deletepost","aria_addmedia","aria_addmedianew","aria_deleteattachment","aria_postedit","aria_canceledit","aria_postnew","aria_cancelnew","aria_ratepost","invalid_file_extension","invalid_file_size_min","invalid_file_size_max","invalid_youtube_url","reloadTimer","lastHistoryId","isEditor","userId","mediaSelection","mediaselection","editingNote","isReadOnlyBoard","readonly","ratingenabled","sortby","editModal","serviceCall","method","args","callback","failcallback","stopUpdating","call","methodname","done","data","fail","error","exception","_serviceCall","apply","arguments","updateBoard","getNote","ident","getNoteTextForNote","note","find","getNoteHeadingForNote","getNoteBorderForNote","getNoteAttachmentsForNote","textIdentifierForNote","noteText","html","noteHeading","noteAttachment","attachmentDataForNote","length","replace","split","slice","join","info","updateNoteAria","noteId","columnIdentifier","closest","text","noteIdentifier","deleteNoteString","attr","updateColumnAria","columnId","column","newNoteString","deleteColumnString","each","index","stopNoteEdit","noteBorder","show","hide","remove","setAttachment","attachment","type","attType","val","decodeText","url","attachmentInfo","attachmentUrl","attachmentFile","prop","attachmentTypeToString","FileReader","attachmentTypeChanged","previewAttachment","filename","filecontents","encodeText","fileElem","elem","removeClass","addClass","parseInt","videoID","match","undefined","getEmbedUrl","addNote","columnid","heading","content","owner","sortorder","rating","ismynote","id","iseditable","pendingNote","notecontent","noteAriaText","attachmentPreview","append","columnContent","beginEdit","showModalForm","startNoteEdit","rateElement","handleAction","canrate","confirm","result","status","historyid","sortNotes","then","rateModal","getRoot","on","ModalEvents","hidden","rateNote","removeElement","deleteNote","handleEditableAction","lastOne","last","insertAfter","prepend","addColumn","name","notes","colour","headerStyle","nameCache","columnHeader","columnSort","columnName","columnNewContent","hideheaders","editable","toggleFontSize","closeOnEnter","noteicon","userid","timecreated","updateSortable","selectHeadingColour","colCount","colourCount","colours","updateNote","processBoardHistory","since","boardhistory","item","boardid","JSON","parse","action","formModal","historyData","alert","instant","history_refresh","setTimeout","clearTimeout","toggle","desc","asc","sortCol","parent","direction","a","b","sort","appendTo","sortable","connectWith","stop","e","ui","this","title","noteid","params","create","ModalFactory","types","SAVE_CANCEL","body","Fragment","loadFragment","large","removeOnClose","modal","getBodyPromise","saveInProgress","setLarge","setSaveButtonText","setButtonText","save","preventDefault","submit","changeEvent","document","createEvent","initEvent","get","reportValidity","element","dispatchEvent","invalid","$","merge","first","focus","formData","stringify","serialize","jsonformdata","Y","use","M","core_formchangechecker","reset_form_dirty_state","destroy","mediaSelect","ytButton","pictureButton","linkButton","updateMediaButtons","addYoutube","addImage","addLink","postButton","cancelButton","modalRoot","button","getActionSelector","updateModalAria","init","columns","newBusy","columnicon","stringsInfo","string","push","key","component","when","results","isAriaTriggerKey","rawText","encodedText","keyCode","callBeforeOnKeyEditing","is","Error"],"mappings":"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"}